version: "3"

services:
  datzproject:
    environment:
      - DISPLAY=host.docker.internal:0
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
    image: mkdatz/datzproject
    container_name: datzproject

  rstudio-server:
    environment:
      - DISABLE_AUTH=true
    image: rocker/rstudio
    ports:
      - 8787:8787
    container_name: rstudio-server

  spyder:
    environment:
      - DISPLAY
    image: compdatasci/spyder-desktop
    ports:
      - 6080:6080
    container_name: spyder

  gitea:
    image: gitea/gitea:1.12.4
    volumes:
      - ./data:/data
    ports:
      - "3000:3000"
      - "22:22"
    depends_on:
      - db
    restart: always
    environment: 
      - DISABLE_REGISTRATION=true
    container_name: gitea

  db:
    image: mariadb:10
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=changeme
      - MYSQL_DATABASE=gitea
      - MYSQL_USER=gitea
      - MYSQL_PASSWORD=changeme
    volumes:
      - ./db/:/var/lib/mysql
    container_name: db

  jupyter:
    image: jupyter/minimal-notebook
    environment:
      - JUPYTER_TOKEN=easy
    ports:
      - 8889:8889
    container_name: jupyter
    command: jupyter notebook --allow-root --ip='0.0.0.0' --port=8889 --no-browser --NotebookApp.token='' --NotebookApp.password=''
  
  orange:
    environment:
      - DISPLAY
    image: acopar/orange-docker
    ports:
      - 5901:5901 
      - 6901:6901
    tty: true
    container_name: orange
    environment:
      - VNC_PW=pass
  
  vscode:
    environment:
      - DISPLAY
    image: linuxserver/code-server
    ports:
      - 8443:8443
    container_name: vscode

  tableau:
    environment:
      - DISPLAY
    image: pvtmert/tableau
    ports:
      - 8316:8316
    container_name: tableau

  # sonarqube:
  #   container_name: sonarqube
  #   ports:
  #     - 9000:9000
  #   restart: on-failure
  #   user: "999"
  #   image: sonarqube

  tensorflow:
    image: jupyter/tensorflow-notebook
    ports:
        - 8888:8888
    container_name: tensorflow
    command: jupyter notebook --allow-root --ip='0.0.0.0' --port=8888 --no-browser --NotebookApp.token='' --NotebookApp.password=''

  # MARKDOWN SERVER ALL GOOD
  markdown-server:
    image: v4tech/markdown-editor
    ports:
      - 12345:80
    container_name: markdown-server

  # namenode:
  #   image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
  #   container_name: namenode
  #   restart: always
  #   ports:
  #     - 9870:9870
  #   volumes:
  #     - hadoop_namenode:/hadoop/dfs/name
  #   environment:
  #     - CLUSTER_NAME=test
  #   env_file:
  #     - ./hadoop.env

  # datanode:
  #   image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
  #   container_name: datanode
  #   restart: always
  #   volumes:
  #     - hadoop_datanode:/hadoop/dfs/data
  #   environment:
  #     SERVICE_PRECONDITION: "namenode:9870"
  #   env_file:
  #     - ./hadoop.env
  
  # resourcemanager:
  #   image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
  #   container_name: resourcemanager
  #   restart: always
  #   environment:
  #     SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864"
  #   env_file:
  #     - ./hadoop.env

  # nodemanager1:
  #   image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
  #   container_name: nodemanager
  #   restart: always
  #   environment:
  #     SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
  #   env_file:
  #     - ./hadoop.env
  
  # historyserver:
  #   image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
  #   container_name: historyserver
  #   restart: always
  #   environment:
  #     SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
  #   volumes:
  #     - hadoop_historyserver:/hadoop/yarn/timeline
  #   env_file:
  #     - ./hadoop.env
  
  # volumes:
  #   hadoop_namenode:
  #   hadoop_datanode:
  #   hadoop_historyserver:

  spark:
    image: jupyter/all-spark-notebook
    container_name: spark
    ports:
      - "8080:8080"
    command: jupyter notebook --allow-root --ip='0.0.0.0' --port=8080 --no-browser --NotebookApp.token='' --NotebookApp.password=''

  sonarqube:
    image: sonarqube:8.2-community
    depends_on:
      - db
    ports:
      - "9000:9000"
    networks:
      - sonarnet
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_temp:/opt/sonarqube/temp
  db:
    image: postgres
    networks:
      - sonarnet
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
    volumes:
      - postgresql:/var/lib/postgresql
      # This needs explicit mapping due to https://github.com/docker-library/postgres/blob/4e48e3228a30763913ece952c611e5e9b95c8759/Dockerfile.template#L52
      - postgresql_data:/var/lib/postgresql/data

networks:
  sonarnet:
    driver: bridge

volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_temp:
  postgresql:
  postgresql_data:
